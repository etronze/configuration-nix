* The Key File
/etc/nixos/configuration.nix
/nix/store/6jq0g7pcvrwn3y1yn2s8jjmc1626xak5-nixos-19.09.2518.8260cd5bc65/nixos/nixos/modules/module-list.nix
* The Key File Path e.g.
# /nix/var/nix/profiles/per-user/root/channels/nixos/
- <nixpkgs/nixos/modules/installer/virtualbox-demo.nix>
# /nix/var/nix/profiles/per-user/root/channels/nixos/nixpkgs/nixos/modules/config/users-groups.nix
* nixos-help
* 'virtualbox-demo' esolve
/nix/var/nix/profiles/per-user/root/channels/nixos/nixpkgs/nixos/modules/installer/virtualbox-demo.nix

  # FIXME: UUID detection is currently broken
  boot.loader.grub.fsIdentifier = "provided";

  # Allow mounting of shared folders.
  users.users.demo.extraGroups = [ "vboxsf" ];

  # Add some more video drivers to give X11 a shot at working in
  # VMware and QEMU.
  services.xserver.videoDrivers = mkOverride 40 [ "virtualbox" "vmware" "cirrus" "vesa" "modesetting" ];

  powerManagement.enable = false;
  system.stateVersion = mkDefault "18.03";

  installer.cloneConfigExtra = ''
  # Let demo build as a trusted user.
  # nix.trustedUsers = [ "demo" ];

  # Mount a VirtualBox shared folder.
  # This is configurable in the VirtualBox menu at
  # Machine / Settings / Shared Folders.
  # fileSystems."/mnt" = {
  #   fsType = "vboxsf";
  #   device = "nameofdevicetomount";
  #   options = [ "rw" ];
  # };

  # By default, the NixOS VirtualBox demo image includes SDDM and Plasma.
  # If you prefer another desktop manager or display manager, you may want
  # to disable the default.
  # services.xserver.desktopManager.plasma5.enable = lib.mkForce false;
  # services.xserver.displayManager.sddm.enable = lib.mkForce false;

  # Enable GDM/GNOME by uncommenting above two lines and two lines below.
  # services.xserver.displayManager.gdm.enable = true;
  # services.xserver.desktopManager.gnome3.enable = true;

  # Set your time zone.
  # time.timeZone = "Europe/Amsterdam";

  # List packages installed in system profile. To search, run:
  # \$ nix search wget
  # environment.systemPackages = with pkgs; [
  #   wget vim
  # ];

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;
  '';
** virtualbox-image.nix
** channel.nix
** demo.nix
  users.users.demo =
    { isNormalUser = true;
      description = "Demo user account";
      extraGroups = [ "wheel" ];
      password = "demo";
      uid = 1000;
    };

  services.xserver.displayManager.sddm.autoLogin = {
    enable = true;
    relogin = true;
    user = "demo";
  };
** clone-config.nix
** graphical.nix
  services.xserver = {
    enable = true;
    displayManager.sddm.enable = true;
    desktopManager.plasma5 = {
      enable = true;
      enableQt4Support = false;
    };
    libinput.enable = true; # for touchpad support on many laptops
  };

  # Enable sound in virtualbox appliances.
  hardware.pulseaudio.enable = true;

  environment.systemPackages = [ pkgs.glxinfo pkgs.firefox ];
* virtualbox system
Linux 2.6 / 3.x / 4.x (64-bit)
sudo -i

Note! Ignore "Information: You may need to update /etc/fstab"
- MBR
  parted /dev/sda -- mklabel msdos
  parted /dev/sda -- mkpart primary 1MiB -8GiB
  parted /dev/sda -- mkpart primary linux-swap -8GiB 100%
- UEFI
  parted /dev/sda -- mklabel gpt
  parted /dev/sda -- mkpart primary 512MiB -8GiB
  parted /dev/sda -- mkpart primary linux-swap -8GiB 100%
  parted /dev/sda -- mkpart ESP fat32 1MiB 512MiB
  parted /dev/sda -- set 3 boot on

# mkfs.ext4 -L nixos /dev/sda1
# mkswap -L swap /dev/sda2
# swapon /dev/sda2
# mkfs.fat -F 32 -n boot /dev/sda3        # (for UEFI systems only)
# mount /dev/disk/by-label/nixos /mnt
# mkdir -p /mnt/boot                      # (for UEFI systems only)
# mount /dev/disk/by-label/boot /mnt/boot # (for UEFI systems only)
# nixos-generate-config --root /mnt
# vim /mnt/etc/nixos/configuration.nix
# nixos-install
# poweroff
# Remove startup disk

# vim /mnt/etc/nixos/configuration.nix
# nixos-rebuild switch

nix-env -qaP '.*pip.*'
nix-env -i python3.7-pip-19.2.3
$ nix-env -qaP \*
$ nix-env -f '<nixpkgs>' -iA w3m
$ nix-env -e thunderbird 
** .nix
  imports = [ <nixpkgs/nixos/modules/installer/virtualbox-demo.nix> ];

  fileSystems."/mnt" = {
    fsType = "vboxsf";
    device = "nameofdevicetomount";
    options = [ "rw" ];
  };